{
	"name": "dataflow2",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DelimitedText8",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "AzureSqlTable5",
						"type": "DatasetReference"
					},
					"name": "sink1"
				},
				{
					"dataset": {
						"referenceName": "AzureSqlTable6",
						"type": "DatasetReference"
					},
					"name": "sink2"
				}
			],
			"transformations": [
				{
					"name": "split1",
					"description": "Conditionally distributing the data in Units, Unit_price, Sale_amt, Salesman, SalesDate, Item groups, based on columns '{1}'"
				},
				{
					"name": "derivedColumn1",
					"description": "Creating/updating the columns 'SalesDate, Salesman, Item, Units, Unit_price, Sale_amt, errorreason'"
				}
			],
			"scriptLines": [
				"source(output(",
				"          SalesDate as date 'dd/MM/yyyy',",
				"          SalesMan as string,",
				"          Item as string,",
				"          Units as integer '000',",
				"          Unit_price as double '000,000,000.000',",
				"          Sale_amt as double '000,000,000.000'",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source1",
				"source1 split(Units > 0 && toDecimal(Unit_price) >= 0.0 && toDecimal(Sale_amt) >= 0.0 &&!isNull(SalesMan) &&!isNull(SalesDate) &&!isNull(Item),",
				"     disjoint: false) ~> split1@(validstream, invalidstream)",
				"split1@invalidstream derive(errorreason = iif(Units <= 0, 'Invalid Units',   iif(Unit_price < 0, 'Negative Price',     iif(isNull(SalesMan), 'Missing SalesMan',       iif(isNull(SalesDate), 'Missing SalesDate',         iif(isNull(Item), 'Missing Item', 'Unknown Error')))))) ~> derivedColumn1",
				"split1@validstream sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          SalesDate as date,",
				"          Salesman as string,",
				"          Item as string,",
				"          Units as integer,",
				"          Unit_price as decimal(10,2),",
				"          Sale_amt as decimal(12,2)",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> sink1",
				"derivedColumn1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          SalesDate as date,",
				"          Salesman as string,",
				"          Item as string,",
				"          Units as integer,",
				"          Unit_price as decimal(10,2),",
				"          Sale_amt as decimal(12,2),",
				"          Reason as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> sink2"
			]
		}
	}
}